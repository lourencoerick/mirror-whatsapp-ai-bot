# .github/workflows/deploy-workers.yml

name: Build, Push and Deploy Worker Images

on:
  push:
    branches: [master, feat/azure_llm]
    paths:
      - "backend/app/workers/**"
      - "backend/app/services/researcher/**"
      - "backend/app/services/knowledge/**"
      - "backend/app/services/ai_reply/**"
      - "backend/app/workers/Dockerfile"
      - "backend/requirements.txt"
      - ".github/workflows/deploy-workers.yml"
  workflow_dispatch:

env:
  DOCKERFILE_PATH: ./backend/app/workers/Dockerfile

jobs:
  # ─────────────────────────────────────────────────────────────
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
      needs_job: ${{ steps.build-matrix.outputs.needs_job }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            consumer:
              - 'backend/app/workers/consumer/**'
              - "backend/app/workers/Dockerfile"
              - "backend/requirements.txt"
              - ".github/workflows/deploy-workers.yml"
            response_sender:
              - 'backend/app/workers/response_sender/**'
              - "backend/app/workers/Dockerfile"
              - "backend/requirements.txt"
              - ".github/workflows/deploy-workers.yml"
            batch:
              - 'backend/app/workers/batch_contacts/**'
              - 'backend/app/workers/researcher/**'
              - 'backend/app/workers/knowledge_ingester/**'
              - 'backend/app/services/researcher/**'
              - 'backend/app/services/knowledge/**'
              - "backend/app/workers/Dockerfile"
              - "backend/requirements.txt"
              - ".github/workflows/deploy-workers.yml"
            ai_replier:
              - 'backend/app/workers/ai_replier/**'
              - 'backend/app/services/ai_reply/**'
              - "backend/app/workers/Dockerfile"
              - "backend/requirements.txt"
              - ".github/workflows/deploy-workers.yml"

      # Constrói JSON da matriz + flag needs_job
      - name: Build matrix JSON
        id: build-matrix
        run: |
          # mapas lógicos → nomes reais
          declare -A IMG=(      [consumer]=worker-consumer
                                [response_sender]=worker-response-sender
                                [batch]=batch-arq-worker
                                [ai_replier]=ai-replier-worker )

          declare -A SA=(       [consumer]="${{ vars.WORKER_CONSUMER_SA_EMAIL }}"
                                [response_sender]="${{ vars.WORKER_RESPONSE_SENDER_SA_EMAIL }}"
                                [batch]="${{ vars.WORKER_BATCH_SA_EMAIL }}"
                                [ai_replier]="${{ vars.WORKER_AI_REPLIER_SA_EMAIL }}" )

          declare -A SRV=(      [consumer]="${{ vars.WORKER_CONSUMER_SERVICE_NAME }}"
                                [response_sender]="${{ vars.WORKER_RESPONSE_SENDER_SERVICE_NAME }}"
                                [batch]="${{ vars.WORKER_BATCH_SERVICE_NAME }}"
                                [ai_replier]="${{ vars.WORKER_AI_REPLIER_SERVICE_NAME }}" )

          json='{"include":['
          first=true
          needs_job=false

          add_entry () {
            [[ $first == false ]] && json+=','
            json+='{"img":"'"${IMG[$1]}"'","sa":"'"${SA[$1]}"'","service":"'"${SRV[$1]}"'"}'
            first=false
            needs_job=true
          }

          [[ "${{ steps.filter.outputs.consumer }}"        == 'true' ]] && add_entry consumer
          [[ "${{ steps.filter.outputs.response_sender }}" == 'true' ]] && add_entry response_sender
          [[ "${{ steps.filter.outputs.batch }}"           == 'true' ]] && add_entry batch
          [[ "${{ steps.filter.outputs.ai_replier }}"      == 'true' ]] && add_entry ai_replier

          json+=']}'
          echo "matrix=$json"      >> "$GITHUB_OUTPUT"
          echo "needs_job=$needs_job" >> "$GITHUB_OUTPUT"

  # ─────────────────────────────────────────────────────────────
  build-and-push:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.needs_job == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WIF_PROVIDER_NAME }}
          service_account: ${{ vars.GCP_SA_EMAIL }}
          audience: https://github.com/${{ github.repository_owner }}

      - uses: docker/setup-buildx-action@v3

      - name: Configure Docker → Artifact Registry
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build & Push ${{ matrix.img }}
        env:
          GCP_REGION: ${{ vars.GCP_REGION }}
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          AR_REPO_ID: ${{ vars.AR_REPO_ID }}
        run: |
          TAG=${{ github.sha }}
          URL="${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${AR_REPO_ID}/${{ matrix.img }}"
          docker buildx build -t "$URL:$TAG" -t "$URL:latest" \
            -f "$DOCKERFILE_PATH" . \
            --push \
            --cache-to   type=gha,mode=max \
            --cache-from type=gha

  # ─────────────────────────────────────────────────────────────
  deploy-workers:
    needs: [detect-changes, build-and-push]
    if: ${{ needs.detect-changes.outputs.needs_job == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WIF_PROVIDER_NAME }}
          service_account: ${{ vars.GCP_SA_EMAIL }}
          audience: https://github.com/${{ github.repository_owner }}

      - name: Deploy ${{ matrix.service }}
        env:
          GCP_REGION: ${{ vars.GCP_REGION }}
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          AR_REPO_ID: ${{ vars.AR_REPO_ID }}
        run: |
          IMAGE_URL="${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${AR_REPO_ID}/${{ matrix.img }}:latest"
          gcloud run deploy "${{ matrix.service }}" \
            --image "$IMAGE_URL" \
            --region "$GCP_REGION" \
            --platform managed \
            --service-account "${{ matrix.sa }}" \
            --project "$GCP_PROJECT_ID" \
            --quiet

# Evita builds/deploys simultâneos do mesmo branch
concurrency:
  group: deploy-workers-${{ github.ref }}
  cancel-in-progress: true
