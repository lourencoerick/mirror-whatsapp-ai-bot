"""Add KnowledgeChunk model and pgvector extension

Revision ID: df04dcbc33a4
Revises: 0743fb99ca00
Create Date: 2025-04-27 02:07:07.881260

"""

from typing import Sequence, Union
from loguru import logger
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

try:
    from pgvector.sqlalchemy import Vector

    PGVECTOR_AVAILABLE = True
except ImportError:
    PGVECTOR_AVAILABLE = False
    Vector = sa.types.TypeDecorator

# revision identifiers, used by Alembic.
revision: str = "df04dcbc33a4"
down_revision: Union[str, None] = "0743fb99ca00"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Definir a dimensão do embedding (ajuste conforme o modelo que você usará)
# Exemplo: text-embedding-3-small usa 1536
EMBEDDING_DIMENSION = 1536


def upgrade() -> None:
    if not PGVECTOR_AVAILABLE:
        raise RuntimeError(
            "pgvector library not found or importable. Cannot proceed with migration."
        )

    # ### commands auto generated by Alembic - please adjust! ###
    logger.info("Creating pgvector extension...")
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")
    logger.info("pgvector extension created or already exists.")

    logger.info("Creating knowledge_chunks table...")
    op.create_table(
        "knowledge_chunks",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            primary_key=True,
        ),
        sa.Column("account_id", postgresql.UUID(as_uuid=True), nullable=False),
        # Tornamos document_id opcional por enquanto, sem FK
        sa.Column("document_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column(
            "source_type",
            sa.String(),
            nullable=False,
            comment="Tipo da fonte original (e.g., 'file', 'url', 'text')",
        ),
        sa.Column(
            "source_identifier",
            sa.String(),
            nullable=False,
            comment="Identificador da fonte (e.g., filename, url)",
        ),
        sa.Column(
            "chunk_text",
            sa.Text(),
            nullable=False,
            comment="O conteúdo textual do chunk",
        ),
        # Usar o tipo Vector importado com a dimensão correta
        sa.Column(
            "embedding",
            Vector(EMBEDDING_DIMENSION),
            nullable=False,
            comment="Vetor de embedding do chunk",
        ),
        # Usar JSONB para melhor performance no PostgreSQL
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Metadados adicionais (e.g., página, etc.)",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        # Definir a chave estrangeira para account_id
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name=op.f("fk_knowledge_chunks_account_id_accounts"),
            ondelete="CASCADE",
        ),
        # Chave primária já definida na coluna 'id'
        # sa.PrimaryKeyConstraint('id', name=op.f('pk_knowledge_chunks')) # Não necessário se primary_key=True na coluna
        comment="Stores text chunks and their vector embeddings for RAG.",
    )
    logger.info("Creating indexes for knowledge_chunks table...")
    # Criar índices para colunas frequentemente consultadas
    op.create_index(
        op.f("ix_knowledge_chunks_account_id"),
        "knowledge_chunks",
        ["account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_knowledge_chunks_document_id"),
        "knowledge_chunks",
        ["document_id"],
        unique=False,
    )
    # Criar um índice para a coluna de embedding (IMPORTANTE para performance do RAG)
    # Usar IVFFlat ou HNSW dependendo do tamanho dos dados e necessidades (HNSW geralmente melhor)
    # Exemplo com HNSW (requer pgvector 0.5.0+)
    op.create_index(
        op.f("ix_knowledge_chunks_embedding"),
        "knowledge_chunks",
        ["embedding"],
        unique=False,
        postgresql_using="hnsw",  # Ou 'ivfflat'
        # Ajustar operadores e parâmetros conforme documentação pgvector e seus dados
        postgresql_ops={
            "embedding": "vector_cosine_ops"
        },  # Exemplo para busca por cosseno
        # postgresql_with={'m': 16, 'ef_construction': 64} # Parâmetros HNSW (exemplo)
    )
    # Exemplo com IVFFlat (mais simples)
    # op.create_index(
    #     op.f('ix_knowledge_chunks_embedding'),
    #     'knowledge_chunks',
    #     ['embedding'],
    #     unique=False,
    #     postgresql_using='ivfflat',
    #     postgresql_ops={'embedding': 'vector_cosine_ops'},
    #     postgresql_with={'lists': 100} # Exemplo: número de listas
    # )
    logger.info("knowledge_chunks table and indexes created.")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    logger.warning("Dropping knowledge_chunks table and indexes...")
    op.drop_index(
        op.f("ix_knowledge_chunks_embedding"),
        table_name="knowledge_chunks",
        postgresql_using="hnsw",
    )  # Ou ivfflat
    op.drop_index(
        op.f("ix_knowledge_chunks_document_id"), table_name="knowledge_chunks"
    )
    op.drop_index(op.f("ix_knowledge_chunks_account_id"), table_name="knowledge_chunks")
    op.drop_table("knowledge_chunks")
    logger.warning("knowledge_chunks table dropped.")

    # Opcional: Remover a extensão (pode falhar se outros objetos dependerem dela)
    # logger.warning("Attempting to drop pgvector extension...")
    # op.execute("DROP EXTENSION IF EXISTS vector;")
    # logger.warning("pgvector extension drop attempted.")
    # ### end Alembic commands ###
