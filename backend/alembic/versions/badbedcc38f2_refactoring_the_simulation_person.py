"""refactoring the simulation person

Revision ID: badbedcc38f2
Revises: e5495de9b66c
Create Date: 2025-05-04 03:47:33.123001

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "badbedcc38f2"
down_revision: Union[str, None] = "e5495de9b66c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "personas",
        sa.Column(
            "potential_objections",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'[]'::jsonb"),
            nullable=False,
            comment="List of potential objections [{'trigger_keyword': 'x', 'objection_text': 'y'},...]",
        ),
    )
    op.add_column(
        "personas",
        sa.Column(
            "off_topic_questions",
            sa.ARRAY(sa.Text()),
            server_default=sa.text("'{}'::text[]"),
            nullable=False,
            comment="List of potential off-topic questions persona might ask.",
        ),
    )
    op.add_column(
        "personas",
        sa.Column(
            "behavior_hints",
            sa.ARRAY(sa.Text()),
            server_default=sa.text("'{}'::text[]"),
            nullable=False,
            comment="List of keywords describing persona behavior (e.g., 'impatient', 'detailed').",
        ),
    )
    op.alter_column(
        "personas",
        "information_needed",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        comment="List of dicts: [{'entity': 'x', 'attribute': 'y'}] - Contextual info persona seeks.",
        existing_comment="List of dicts: [{'entity': 'x', 'attribute': 'y'}]",
        existing_nullable=False,
    )
    op.alter_column(
        "personas",
        "success_criteria",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        comment="List of strings defining success (often empty now).",
        existing_comment="List of strings, e.g. ['state:all_info_extracted']",
        existing_nullable=False,
    )
    op.alter_column(
        "personas",
        "failure_criteria",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        comment="List of strings defining failure.",
        existing_comment="List of strings, e.g. ['event:ai_fallback_detected']",
        existing_nullable=False,
    )
    op.drop_index("ix_personas_persona_id", table_name="personas")
    op.create_index(
        op.f("ix_personas_persona_id"), "personas", ["persona_id"], unique=True
    )
    op.drop_index("ix_personas_simulation_contact_identifier", table_name="personas")
    op.create_index(
        op.f("ix_personas_simulation_contact_identifier"),
        "personas",
        ["simulation_contact_identifier"],
        unique=True,
    )
    op.drop_constraint("personas_contact_id_fkey", "personas", type_="foreignkey")
    op.create_foreign_key(
        None, "personas", "contacts", ["contact_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("personas", "info_attribute_to_question_template")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "personas",
        sa.Column(
            "info_attribute_to_question_template",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
            comment="Dict: {'attribute': 'template {entity} ?'}",
        ),
    )
    op.drop_constraint(None, "personas", type_="foreignkey")
    op.create_foreign_key(
        "personas_contact_id_fkey", "personas", "contacts", ["contact_id"], ["id"]
    )
    op.drop_index(
        op.f("ix_personas_simulation_contact_identifier"), table_name="personas"
    )
    op.create_index(
        "ix_personas_simulation_contact_identifier",
        "personas",
        ["simulation_contact_identifier"],
        unique=False,
    )
    op.drop_index(op.f("ix_personas_persona_id"), table_name="personas")
    op.create_index("ix_personas_persona_id", "personas", ["persona_id"], unique=False)
    op.alter_column(
        "personas",
        "failure_criteria",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        comment="List of strings, e.g. ['event:ai_fallback_detected']",
        existing_comment="List of strings defining failure.",
        existing_nullable=False,
    )
    op.alter_column(
        "personas",
        "success_criteria",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        comment="List of strings, e.g. ['state:all_info_extracted']",
        existing_comment="List of strings defining success (often empty now).",
        existing_nullable=False,
    )
    op.alter_column(
        "personas",
        "information_needed",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        comment="List of dicts: [{'entity': 'x', 'attribute': 'y'}]",
        existing_comment="List of dicts: [{'entity': 'x', 'attribute': 'y'}] - Contextual info persona seeks.",
        existing_nullable=False,
    )
    op.drop_column("personas", "behavior_hints")
    op.drop_column("personas", "off_topic_questions")
    op.drop_column("personas", "potential_objections")

    # ### end Alembic commands ###
