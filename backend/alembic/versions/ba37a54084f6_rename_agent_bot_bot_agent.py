"""rename agent bot -> bot agent

Revision ID: ba37a54084f6
Revises: 85c035cf497d
Create Date: 2025-04-25 22:14:26.862532

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "ba37a54084f6"
down_revision: Union[str, None] = "85c035cf497d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bot_agents",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("account_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("first_message", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("use_rag", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_bot_agents_account_id"), "bot_agents", ["account_id"], unique=False
    )
    op.create_index(
        op.f("ix_bot_agents_is_active"), "bot_agents", ["is_active"], unique=False
    )
    op.create_table(
        "bot_agent_inboxes",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("account_id", sa.UUID(), nullable=False),
        sa.Column("inbox_id", sa.UUID(), nullable=False),
        sa.Column("bot_agent_id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["bot_agent_id"], ["bot_agents.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["inbox_id"], ["inboxes.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "account_id", "inbox_id"),
        sa.UniqueConstraint(
            "account_id", "inbox_id", name="uq_bot_agent_inboxes_account_inbox"
        ),
    )
    op.create_index(
        op.f("ix_bot_agent_inboxes_bot_agent_id"),
        "bot_agent_inboxes",
        ["bot_agent_id"],
        unique=False,
    )
    op.drop_index("ix_agent_bot_inboxes_agent_bot_id", table_name="agent_bot_inboxes")
    op.drop_table("agent_bot_inboxes")
    op.drop_index("ix_agent_bots_account_id", table_name="agent_bots")
    op.drop_index("ix_agent_bots_is_active", table_name="agent_bots")
    op.drop_table("agent_bots")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "agent_bots",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("account_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("first_message", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("use_rag", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name="agent_bots_account_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="agent_bots_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_agent_bots_is_active", "agent_bots", ["is_active"], unique=False
    )
    op.create_index(
        "ix_agent_bots_account_id", "agent_bots", ["account_id"], unique=False
    )
    op.create_table(
        "agent_bot_inboxes",
        sa.Column("account_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("inbox_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("agent_bot_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name="agent_bot_inboxes_account_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["agent_bot_id"],
            ["agent_bots.id"],
            name="agent_bot_inboxes_agent_bot_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["inbox_id"],
            ["inboxes.id"],
            name="agent_bot_inboxes_inbox_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="agent_bot_inboxes_pkey"),
        sa.UniqueConstraint(
            "account_id", "inbox_id", name="uq_agent_bot_inboxes_account_inbox"
        ),
    )
    op.create_index(
        "ix_agent_bot_inboxes_agent_bot_id",
        "agent_bot_inboxes",
        ["agent_bot_id"],
        unique=False,
    )
    op.drop_index(
        op.f("ix_bot_agent_inboxes_bot_agent_id"), table_name="bot_agent_inboxes"
    )
    op.drop_table("bot_agent_inboxes")
    op.drop_index(op.f("ix_bot_agents_is_active"), table_name="bot_agents")
    op.drop_index(op.f("ix_bot_agents_account_id"), table_name="bot_agents")
    op.drop_table("bot_agents")
    # ### end Alembic commands ###
