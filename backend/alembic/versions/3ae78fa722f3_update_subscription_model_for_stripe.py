"""update subscription model for stripe

Revision ID: 3ae78fa722f3
Revises: 8fc3080234b6
Create Date: 2025-05-22 21:45:33.052847

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "3ae78fa722f3"
down_revision: Union[str, None] = "8fc3080234b6"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

DB_ENUM_VALUES = (
    "active",
    "past_due",
    "unpaid",
    "canceled",
    "incomplete",
    "incomplete_expired",
    "ended",
)
SUBSCRIPTION_STATUS_ENUM_NAME = "subscription_status_enum"


def upgrade() -> None:
    db_subscription_status_enum = postgresql.ENUM(
        *DB_ENUM_VALUES, name=SUBSCRIPTION_STATUS_ENUM_NAME
    )
    db_subscription_status_enum.create(op.get_bind(), checkfirst=True)
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "subscriptions",
        sa.Column(
            "stripe_subscription_id",
            sa.String(length=255),
            nullable=False,
            comment="Stripe Subscription ID (sub_xxx)",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "stripe_product_id",
            sa.String(length=255),
            nullable=True,
            comment="Stripe Product ID (prod_xxx) for the subscribed plan",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "stripe_price_id",
            sa.String(length=255),
            nullable=False,
            comment="Stripe Price ID (price_xxx) for the specific pricing plan",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "PAST_DUE",
                "UNPAID",
                "CANCELED",
                "INCOMPLETE",
                "INCOMPLETE_EXPIRED",
                "TRIALING",
                "ENDED",
                name="subscription_status_enum",
            ),
            nullable=False,
            comment="Current status of the subscription, synced from Stripe",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "current_period_start",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Start of the current billing period (from Stripe)",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "current_period_end",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="End of the current billing period (from Stripe)",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "trial_start_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Start of the trial period (from Stripe)",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "trial_ends_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="End of the trial period (from Stripe)",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "cancel_at_period_end",
            sa.Boolean(),
            server_default="false",
            nullable=False,
            comment="True if the subscription is set to cancel at the end of the current period",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "canceled_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Timestamp when the subscription was actually canceled (from Stripe)",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "ended_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Timestamp when the subscription ended definitively (from Stripe)",
        ),
    )
    op.alter_column(
        "subscriptions",
        "stripe_customer_id",
        existing_type=sa.VARCHAR(length=255),
        nullable=False,
        comment="Stripe Customer ID (cus_xxx)",
    )
    op.create_index(
        op.f("ix_subscriptions_account_id"),
        "subscriptions",
        ["account_id"],
        unique=False,
    )
    op.create_index(
        "ix_subscriptions_account_id_status",
        "subscriptions",
        ["account_id", "status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subscriptions_status"), "subscriptions", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_subscriptions_stripe_customer_id"),
        "subscriptions",
        ["stripe_customer_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subscriptions_stripe_subscription_id"),
        "subscriptions",
        ["stripe_subscription_id"],
        unique=True,
    )
    op.drop_constraint(
        "subscriptions_account_id_fkey", "subscriptions", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "subscriptions", "accounts", ["account_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("subscriptions", "pricing_version")
    op.drop_column("subscriptions", "state")
    op.drop_column("subscriptions", "expiry")
    op.drop_column("subscriptions", "payment_source_added")
    op.drop_column("subscriptions", "billing_plan")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "subscriptions",
        sa.Column(
            "billing_plan", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "payment_source_added", sa.SMALLINT(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "expiry",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column("state", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "pricing_version",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "subscriptions", type_="foreignkey")
    op.create_foreign_key(
        "subscriptions_account_id_fkey",
        "subscriptions",
        "accounts",
        ["account_id"],
        ["id"],
    )
    op.drop_index(
        op.f("ix_subscriptions_stripe_subscription_id"), table_name="subscriptions"
    )
    op.drop_index(
        op.f("ix_subscriptions_stripe_customer_id"), table_name="subscriptions"
    )
    op.drop_index(op.f("ix_subscriptions_status"), table_name="subscriptions")
    op.drop_index("ix_subscriptions_account_id_status", table_name="subscriptions")
    op.drop_index(op.f("ix_subscriptions_account_id"), table_name="subscriptions")
    op.alter_column(
        "subscriptions",
        "stripe_customer_id",
        existing_type=sa.VARCHAR(length=255),
        nullable=True,
        comment=None,
        existing_comment="Stripe Customer ID (cus_xxx)",
    )
    op.drop_column("subscriptions", "ended_at")
    op.drop_column("subscriptions", "canceled_at")
    op.drop_column("subscriptions", "cancel_at_period_end")
    op.drop_column("subscriptions", "trial_ends_at")
    op.drop_column("subscriptions", "trial_start_at")
    op.drop_column("subscriptions", "current_period_end")
    op.drop_column("subscriptions", "current_period_start")
    op.drop_column("subscriptions", "status")
    op.drop_column("subscriptions", "stripe_price_id")
    op.drop_column("subscriptions", "stripe_product_id")
    op.drop_column("subscriptions", "stripe_subscription_id")
    # ### end Alembic commands ###
    db_subscription_status_enum_for_downgrade.drop(op.get_bind(), checkfirst=True)
