# backend/app/services/ai_reply/new_agent/components/output_formatter.py

from typing import Dict, Any
from loguru import logger

from ..state_definition import RichConversationState

# Importar as instruções como referência (embora a formatação seja esperada do LLM)
from ..prompt_utils import WHATSAPP_MARKDOWN_INSTRUCTIONS


def _apply_whatsapp_formatting(text: str) -> str:
    """
    Applies basic cleanup and ensures text is ready for WhatsApp.

    Currently assumes the LLM followed the formatting instructions provided
    in its prompt (based on WHATSAPP_MARKDOWN_INSTRUCTIONS). This function
    primarily handles whitespace cleanup. More complex rule enforcement
    can be added here if the LLM consistently fails to format correctly.

    Args:
        text: The raw text generated by the LLM.

    Returns:
        The cleaned text, potentially formatted for WhatsApp.
    """
    if not text:
        return ""
    # Simple strip for now. Add more rules here if needed.
    # Example: Replace standard markdown bold **text** with WhatsApp *text* if LLM fails.
    # text = text.replace("**", "*") # Example rule (currently disabled)
    return text.strip().replace("**", "*")


async def output_formatter_node(
    state: RichConversationState, config: Dict[str, Any]
) -> Dict[str, Any]:
    """
    Formats the raw agent response text for WhatsApp compatibility.

    Retrieves the 'last_agent_generation_text' from the state, applies
    WhatsApp-specific formatting rules (or cleanup), and returns the result
    in 'final_agent_message_text'.

    Args:
        state: The current conversation state.
        config: The graph configuration.

    Returns:
        A dictionary containing the formatted text under the key
        'final_agent_message_text'.
    """
    node_name = "output_formatter_node"
    logger.info(f"--- Starting Node: {node_name} ---")

    generated_text = state.get("last_agent_generation_text")

    if not generated_text:
        logger.warning(
            f"[{node_name}] No text found in 'last_agent_generation_text' to format."
        )
        # Return empty string if no text to format, ensuring the key exists
        return {"final_agent_message_text": ""}

    logger.debug(f"[{node_name}] Raw text received: '{generated_text[:100]}...'")
    formatted_text = _apply_whatsapp_formatting(generated_text)
    logger.debug(f"[{node_name}] Formatted text: '{formatted_text[:100]}...'")

    # Return the formatted text in the expected key for the next node (FinalStateUpdater)
    return {"final_agent_message_text": formatted_text}
